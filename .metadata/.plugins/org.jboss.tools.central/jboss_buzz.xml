<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><entry><title type="html">New Keycloak maintainer: Václav Muzikář</title><link rel="alternate" href="https://www.keycloak.org/2022/08/vaclav" /><author><name>Bruno Oliveira</name></author><id>https://www.keycloak.org/2022/08/vaclav</id><updated>2022-08-04T00:00:00Z</updated><content type="html">We are pleased to welcome as an official maintainer of Keycloak. Vašek has consistently collaborated to the success of Keycloak since 2015 when he joined Red Hat. He is known for his various contributions to our test suite, the Quickstarts, integration tests for the Node.js Adapter, improvements in the new Account Console, security auditing of our REST Account API, enhancement to our pipelines and also the maintenance and development of Keycloak Operator. Now he is coordinating the efforts on Cloud-Native development which includes the new Quarkus distribution and the new Operator. He has shown his commitment to the Keycloak community collaborating on design discussions, participating in GitHub discussions, reviewing pull-requests, answering questions on the Keycloak mailing lists, contributing to new features, bug fixes and triaging GitHub issues. The Keycloak team is very excited to welcome Vašek as our new maintainer and long-time contributor.</content><dc:creator>Bruno Oliveira</dc:creator></entry><entry><title>Add custom windows to GDB: Programming the TUI in Python</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/08/03/add-custom-windows-gdb-programming-tui-python" /><author><name>Andrew Burgess</name></author><id>f804e90d-3490-46e4-8d4e-cf8aafedd6c8</id><updated>2022-08-03T07:00:00Z</updated><published>2022-08-03T07:00:00Z</published><summary type="html">&lt;p&gt;The &lt;a href="https://www.sourceware.org/gdb/"&gt;GNU Debugger&lt;/a&gt; (GDB), a popular free and open source tool for &lt;a href="/topics/c"&gt;C and C++&lt;/a&gt; programmers, offers a Text User Interface (TUI) to split the console into multiple windows and display different content in each window. One window will always be a command window, in which you enter the usual GDB commands, but you might also have a source code window, a register contents window, or a disassembly window. Since GDB 11, you can use a &lt;a href="/topics/python"&gt;Python&lt;/a&gt; API to add new window types. This API can be incredibly useful, allowing you to customize GDB to visualize your application's data in new ways.&lt;/p&gt; &lt;p class="Indent1"&gt;&lt;strong&gt;Note&lt;/strong&gt;: The Python API for adding TUI windows was actually added to GDB 10. Unfortunately, prior to GDB 11, the &lt;code&gt;gdb.TuiWindow.write&lt;/code&gt; call had some bugs that were not resolved until GDB 11.&lt;/p&gt; &lt;p&gt;In this article, the first in a two-part series, you'll learn how to create a window and load it with dynamic content. The real power of the TUI will be shown in the second article, which shows how to display useful information from GDB.&lt;/p&gt; &lt;h2&gt;Why use the GDB Text User Interface?&lt;/h2&gt; &lt;p&gt;Imagine you are debugging a system containing a cache. You could create a custom window that shows you, at a glance, what is mapped into each cache entry. Or if your system generates an event or activity log, you could set up a window that shows the most recent entries from that log. All of these things could be done in a pure command-line environment, but by creating a custom TUI window, you can view the information on the screen all of the time, making it much easier to spot problems, and so fix bugs more quickly.&lt;/p&gt; &lt;p&gt;For this two-part tutorial, you'll create a new window that just displays GDB's value history. However, once you've finished, you should have the skills needed to adapt this example to display any data you want, including unique views into your application.&lt;/p&gt; &lt;h2&gt;Your first window&lt;/h2&gt; &lt;p&gt;Start by creating the simplest working window possible. Create an empty file named &lt;code&gt;history.py&lt;/code&gt; and then add this content:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-python"&gt;class history_window: def __init__(self, tui_window): self._tui_window = tui_window self._tui_window.title = 'Value History' gdb.register_window_type('history', history_window)&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The function &lt;code&gt;gdb.register_window_type&lt;/code&gt; is how you alert GDB to your new window type. The first argument is a string giving the name of the new window (&lt;code&gt;history&lt;/code&gt;, in the example). The second argument is a factory method that GDB will call when it needs to create an instance of the &lt;code&gt;history&lt;/code&gt; window.&lt;/p&gt; &lt;p&gt;The factory method is passed an object of type &lt;code&gt;gdb.TuiWindow&lt;/code&gt;, and should return a brand new object of any type that represents your custom window.&lt;/p&gt; &lt;p&gt;The example uses the &lt;code&gt;history_window&lt;/code&gt; class constructor as the factory method. The &lt;code&gt;tui_window&lt;/code&gt; argument is of type &lt;code&gt;gdb.TuiWindow&lt;/code&gt; and is passed from GDB. The class stores &lt;code&gt;tui_window&lt;/code&gt; into the new instance to be used later on for writing into the window. But for now, all the class does is use the object to set the title of the window to &lt;code&gt;Value History&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Now get GDB to display the new window. Start GDB, and enter this command to load and run your Python script, registering the new window type with GDB:&lt;/p&gt; &lt;pre&gt; &lt;code class="markdown"&gt;(gdb) source history.py&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Use the &lt;code&gt;tui new-layout&lt;/code&gt; command to create a new layout:&lt;/p&gt; &lt;pre&gt; &lt;code class="markdown"&gt;(gdb) tui new-layout example_1 history 1 cmd 1 status 1&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;A layout is just a collection of windows that are displayed together. GDB has several built-in layouts, but you just created a new one called &lt;code&gt;example_1&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The remaining arguments to &lt;code&gt;tui new-layout&lt;/code&gt; define the windows you will add to this layout. The number after each window is the relative weight of that window in the layout. The weight is a guide to GDB for how much terminal space to allocate to each window. The weight is only a guide, though. Some windows, such as &lt;code&gt;status&lt;/code&gt;, have a maximum size. Other windows, such as &lt;code&gt;cmd&lt;/code&gt; and &lt;code&gt;history&lt;/code&gt;, can be any size. GDB considers all of these constraints and sizes each window appropriately.&lt;/p&gt; &lt;p&gt;Finally, tell GDB to activate TUI mode and use your new layout:&lt;/p&gt; &lt;pre&gt; &lt;code class="markdown"&gt;(gdb) layout example_1&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If everything has worked, your GDB terminal should now look like Figure 1.&lt;/p&gt; &lt;figure class="rhd-u-has-filter-caption" role="group"&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt; &lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="/sites/default/files/blank.png" data-featherlight="image"&gt;&lt;img src="/sites/default/files/styles/article_full_width_1440px_w/public/blank.png?itok=OtE9Mk2t" width="490" height="320" alt="GDB shows a new blank screen with the title Value History." loading="lazy" typeof="Image" /&gt; &lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 1. GDB shows a new blank screen with the title Value History. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt; &lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 1: GDB shows a new blank screen with the title Value History.&lt;/figcaption&gt; &lt;/figure&gt; &lt;p&gt;That's not very exciting. Your &lt;code&gt;history_window&lt;/code&gt; window, displayed at the top part of the terminal, shows the &lt;code&gt;Value History&lt;/code&gt; title, but otherwise, the new window remains blank.&lt;/p&gt; &lt;h2&gt;Adding content to the window&lt;/h2&gt; &lt;p&gt;The next task is to generate some content in your window. Every time GDB needs to redraw the window contents, it calls the &lt;code&gt;render&lt;/code&gt; method on the window object. We didn't implement this method initially. If the method doesn't exist, GDB doesn't try to call it, and just leaves the window blank.&lt;/p&gt; &lt;p&gt;So now, add the following &lt;code&gt;render&lt;/code&gt; method to your &lt;code&gt;history_window&lt;/code&gt; class:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-python"&gt; def render(self): self._tui_window.erase() self._tui_window.write('Hello World\n') self._tui_window.write('Two\nLines\n') self._tui_window.write('abc'*2000000)&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Restart GDB and reload your &lt;code&gt;history.py&lt;/code&gt; script. Rather than retyping the commands into your GDB session, you can pass the commands to GDB from the command line like this:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;gdb -ex 'source history.py' \ -ex 'tui new-layout example_1 history 1 cmd 1 status 1' \ -ex 'layout example_1'&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;GDB should start and immediately switch to TUI mode. The terminal should look like Figure 2.&lt;/p&gt; &lt;figure class="rhd-u-has-filter-caption" role="group"&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt; &lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="/sites/default/files/pre.png" data-featherlight="image"&gt;&lt;img src="/sites/default/files/styles/article_full_width_1440px_w/public/pre.png?itok=xpzfp8uv" width="490" height="320" alt="The Value History screen contains predefined text inserted by your &amp;quot;render&amp;quot; method." loading="lazy" typeof="Image" /&gt; &lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 2. The Value History screen contains predefined text inserted by your "render" method. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt; &lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 2: The Value History screen contains predefined text inserted by your render method.&lt;/figcaption&gt; &lt;/figure&gt; &lt;p&gt;Note how the very long line of repeated &lt;code&gt;abc&lt;/code&gt; characters wraps at the right side of the window, but is cut off at the bottom of the window. The way GDB fits content into windows is important to keep in mind when you start laying out real content.&lt;/p&gt; &lt;h2&gt;Spotting new history items&lt;/h2&gt; &lt;p&gt;To display every value from GDB's history list, you need some way to spot when new values are added to the history list. GDB doesn't have a Python event that notifies you when values are added to the history list, but there is an event that notifies you when GDB is about to display a new prompt. So you need to catch this event, called &lt;code&gt;before_prompt&lt;/code&gt;, then fetch any new values from the history list and add them to your window content.&lt;/p&gt; &lt;p&gt;Start by adding code to catch the &lt;code&gt;before_prompt&lt;/code&gt; event to your &lt;code&gt;history_window&lt;/code&gt; class. Add the following two lines to the &lt;code&gt;history_window&lt;/code&gt; class, in the &lt;code&gt;__init__&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-python"&gt; self._before_prompt_listener = lambda : self._before_prompt() gdb.events.before_prompt.connect(self._before_prompt_listener)&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This code creates a new lambda function stored in &lt;code&gt;_before_prompt_listener&lt;/code&gt;. This is the callback function for the event. The next line calls &lt;code&gt;gdb.events.before_prompt.connect&lt;/code&gt; to register this callback with GDB. Now, every time GDB displays a prompt, it will first call this function.&lt;/p&gt; &lt;p&gt;The callback function forwards the call to the &lt;code&gt;_before_prompt&lt;/code&gt; method of your &lt;code&gt;history_window&lt;/code&gt; class. You haven't written that yet, but you will shortly. Before you do, though, let's go back and rework our &lt;code&gt;render&lt;/code&gt; method to make it a little more useful. First, add the following line to the &lt;code&gt;__init__&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-python"&gt; self._lines = []&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This list will contain all of the lines for our window.&lt;/p&gt; &lt;p&gt;Now replace the existing &lt;code&gt;render&lt;/code&gt; method with a new one, which displays the content out of your newly created &lt;code&gt;_lines&lt;/code&gt; variable:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-python"&gt; def render(self): height = self._tui_window.height width = self._tui_window.width lines = self._lines[-height:] self._tui_window.erase() for l in lines: if len(l) &amp;lt; width: l += "\n" else: l = l[0:width] self._tui_window.write(l)&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The first two lines of this method read the &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; from the &lt;code&gt;gdb.TuiWindow&lt;/code&gt; object. These values can change every time the &lt;code&gt;render&lt;/code&gt; method is called, because GDB might have resized the window.&lt;/p&gt; &lt;p&gt;The third line of the function uses the &lt;code&gt;height&lt;/code&gt; to select the last few lines from the list of all content lines.&lt;/p&gt; &lt;p&gt;Next, &lt;code&gt;erase&lt;/code&gt; clears the window contents. The function then loops through all the lines to display. If the line is shorter than the screen width, the &lt;code&gt;if&lt;/code&gt; statement adds a newline. Otherwise, the &lt;code&gt;else&lt;/code&gt; statement trims the line to exactly the screen width. Finally, the function calls &lt;code&gt;write&lt;/code&gt; to add the line to the screen.&lt;/p&gt; &lt;p&gt;The last thing you need to do is write the &lt;code&gt;_before_prompt&lt;/code&gt; method:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-python"&gt; def _before_prompt(self): self._lines.append('The GDB prompt has been displayed. Good Job!') self.render()&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This method adds content to the &lt;code&gt;_lines&lt;/code&gt; variable, which your &lt;code&gt;render&lt;/code&gt; method can then display.&lt;/p&gt; &lt;p&gt;Restart GDB using this command line:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;gdb -ex 'source history.py' \ -ex 'tui new-layout example_1 history 1 cmd 1 status 1' \ -ex 'layout example_1'&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;With luck, your debugger should look something like Figure 3.&lt;/p&gt; &lt;figure class="rhd-u-has-filter-caption" role="group"&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt; &lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="/sites/default/files/prompt.png" data-featherlight="image"&gt;&lt;img src="/sites/default/files/styles/article_full_width_1440px_w/public/prompt.png?itok=q_XLW2rs" width="490" height="320" alt="The Value History screen displays text you requested before displaying the GDB prompt." loading="lazy" typeof="Image" /&gt; &lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 3. The Value History screen displays text you requested before displaying the GDB prompt. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt; &lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 3: The Value History screen displays text you requested before displaying the GDB prompt.&lt;/figcaption&gt; &lt;/figure&gt; &lt;p&gt;If you press the Return key a few times, you should start to see the window fill with text. Next, if you reduce the width of your terminal, you should see the text truncated to the new width (Figure 4).&lt;/p&gt; &lt;figure class="rhd-u-has-filter-caption" role="group"&gt; &lt;div class="rhd-c-figure"&gt; &lt;article class="media media--type-image media--view-mode-article-content-full-width"&gt; &lt;div class="field field--name-image field--type-image field--label-hidden field__items"&gt; &lt;a href="/sites/default/files/multi_0.png" data-featherlight="image"&gt;&lt;img src="/sites/default/files/styles/article_full_width_1440px_w/public/multi_0.png?itok=kehMCg9b" width="196" height="320" alt="GDB truncates each line if the window is too narrow to display it." loading="lazy" typeof="Image" /&gt; &lt;/a&gt; &lt;/div&gt; &lt;div class="field field--name-field-caption field--type-string field--label-hidden field__items"&gt; &lt;div class="rhd-c-caption field__item"&gt; Figure 4. GDB truncates each line if the window is too narrow to display it. &lt;/div&gt; &lt;/div&gt; &lt;/article&gt; &lt;/div&gt; &lt;figcaption class="rhd-c-caption"&gt;Figure 4: GDB truncates each line if the window is too narrow to display it.&lt;/figcaption&gt; &lt;/figure&gt; &lt;p&gt;Excellent. You are almost ready to replace the placeholder strings you've been using with the actual history values into the window, which the second article in this series accomplishes.&lt;/p&gt; &lt;h2&gt;Oh, no—a bug&lt;/h2&gt; &lt;p&gt;Start GDB and load your window, just as before. But this time, switch away from your new layout to a layout that doesn't use your custom window. The full set of GDB commands for this task are:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ gdb (gdb) source history.py (gdb) tui new-layout example_1 history 1 cmd 1 status 1 (gdb) layout example_1 (gdb) layout src&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You should see this error message from GDB in the terminal:&lt;/p&gt; &lt;pre&gt; &lt;code class="markdown"&gt;Python Exception &amp;lt;class 'RuntimeError'&amp;gt;: TUI window is invalid.&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The problem is that, once GDB is no longer displaying your history window, the &lt;code&gt;gdb.TuiWindow&lt;/code&gt; that represents it is invalidated and can no longer be used to write to the screen. However, your &lt;code&gt;before_prompt&lt;/code&gt; event handler is still registered and continues to call &lt;code&gt;render&lt;/code&gt;, which will try to write to the screen using the &lt;code&gt;gdb.TuiWindow&lt;/code&gt; object.&lt;/p&gt; &lt;p&gt;To remove this message, you need to disconnect the event listener when your &lt;code&gt;history_window&lt;/code&gt; is being removed from the screen. This task is easily done by adding the &lt;code&gt;close&lt;/code&gt; method to your &lt;code&gt;history_window&lt;/code&gt; class, like this:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-python"&gt; def close(self): gdb.events.before_prompt.disconnect(self._before_prompt_listener)&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now, when switching from the &lt;code&gt;example_1&lt;/code&gt; layout to the &lt;code&gt;src&lt;/code&gt; layout, you no longer get an error.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;This article got you started with displaying content dynamically in a GDB window. The next article in this series will show you how to display useful information by retrieving the values from GDB's history list.&lt;/p&gt; The post &lt;a href="/articles/2022/08/03/add-custom-windows-gdb-programming-tui-python" title="Add custom windows to GDB: Programming the TUI in Python"&gt;Add custom windows to GDB: Programming the TUI in Python&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br&gt;&lt;br&gt;</summary><dc:creator>Andrew Burgess</dc:creator><dc:date>2022-08-03T07:00:00Z</dc:date></entry><entry><title type="html">Kogito 1.25.0 released!</title><link rel="alternate" href="https://blog.kie.org/2022/08/kogito-1-25-0-released.html" /><author><name>Cristiano Nicolai</name></author><id>https://blog.kie.org/2022/08/kogito-1-25-0-released.html</id><updated>2022-08-03T04:14:14Z</updated><content type="html">We are glad to announce that the Kogito 1.25.0 release is now available! This goes hand in hand with , release. From a feature point of view, we have included a series of new features and bug fixes, including: * Improved support of gRCP to Json Mapping. Now Kogito is following * Adding HTTP error codes handling.  * Fixed memory leak when running processes with rules in BusinesRuleTask * Serverless Workflow codestart for Quarkus KNOWN ISSUE(S) * Kogito Builder cannot build from assets with Quarkus Kogito was released with Quarkus 2.11.0.Final artifacts but the Quarkus platform, due to CVE issues, . And, when building from asset files (BPMN, DMN, DRL), the Kogito Builder image  is guessing  directly the Quarkus version from the org.kie.kogito:kogito-build-parent:${KOGITO_VERSION} artifact, which will return the 2.11.0.Final version and thus fail due to missing platform. Workaround is to set the QUARKUS_VERSION `build-env` option with the CLI or directly into the KogitoBuild environment. For more details head to the complete . All artifacts are available now: * Kogito runtime artifacts are available on Maven Central. * Kogito examples can be found . * Kogito images are available on . * Kogito operator is available in the in OpenShift and Kubernetes. * Kogito tooling 0.21.0 artifacts are available at the . A detailed changelog for 1.25.0 can be found in . New to Kogito? Check out our website . Click the "Get Started" button. The post appeared first on .</content><dc:creator>Cristiano Nicolai</dc:creator></entry><entry><title type="html">RESTEasy 6.1.0.Final Release</title><link rel="alternate" href="https://resteasy.github.io/2022/08/02/resteasy-6.1.0-release/" /><author><name /></author><id>https://resteasy.github.io/2022/08/02/resteasy-6.1.0-release/</id><updated>2022-08-02T18:11:11Z</updated><dc:creator /></entry><entry><title type="html">Serverless Drools in 3 steps: Kogito, Quarkus, Kubernetes and Knative!</title><link rel="alternate" href="https://blog.kie.org/2022/08/serverless-drools-in-3-steps-kogito-quarkus-kubernetes-and-knative.html" /><author><name>Matteo Mortari</name></author><id>https://blog.kie.org/2022/08/serverless-drools-in-3-steps-kogito-quarkus-kubernetes-and-knative.html</id><updated>2022-08-02T09:38:23Z</updated><content type="html">This short tutorial walks you through the configuration and deployment of a simple serverless application, including autoscaling with scale to zero, thanks to , , OpenShift Serverless with Kubernetes and ! STEP 1: DROOLS APP CREATION WITH CODE.QUARKUS.IO To generate the application as shown in the video, you can use this link: The link will automatically populate for you the basic extensions needed to follow this tutorial. STEP 2: MAINTAIN CONFIGURATION In the application.properties file, you need to maintain a couple of required configuration, following this guideline: quarkus.kubernetes.deployment-target=knative quarkus.container-image.registry=quay.io quarkus.container-image.group=&lt;your own account&gt; You may decide for the Container Image Registry to opt instead for docker.io or similar, and you will need to configure . STEP 3: DEPLOY YOUR DROOLS SERVERLESS APP 🚀 To deploy on Kubernetes, my preference is to deliberately publish a Container Image on a Registry; to follow this strategy, you just need to issue a couple of commands on the terminal. The first command will produce a Container Image for our Drools serverless application, and publish it on the Registry: mvn clean package -Dquarkus.container-image.push=true Then, the second command will effectively deploy that image on the OpenShift cluster: kubectl apply -f target/kubernetes/knative.yml Thanks to Knative, we have autoscaling including autoscale-to-zero, as it’s shown in the video! Autoscale to zero in action, for the Drools serverless app BONUS: SWAGGER UI OPENAPI If you want to use Swagger UI and the OpenAPI web based GUI in your deployed app, simply add quarkus-smallrye-openapi in the , and then maintain the application.properties configuration: quarkus.swagger-ui.always-include=true WANT TO LEARN MORE? We hope you enjoyed this lighthearted tutorial 😄 Did you know that formal training is available from Red Hat? teaches you how to develop, deploy, and auto-scale event driven serverless applications on the Red Hat OpenShift Container Platform. Read the course page to . CONCLUSIONS We have create a simple Drools serverless app with just 3 steps thanks to Kogito and Quarkus; then, thanks to OpenShift Serverless based on Kubernetes and Knative capabilities, we have autoscaling applied, including scale-to-zero. You can use your own Kubernetes cluster while following this tutorial, but don’t forget you can use a free to replicate all the steps exactly as shown in the video! If you enjoyed this simple tutorial, you might be also interested to read this other guide on using the Drools for content based routing on Kafka, using Quarkus and too! Check it out . Questions? Let us know your feedback by leaving a comment below! 👋 The post appeared first on .</content><dc:creator>Matteo Mortari</dc:creator></entry><entry><title>How to configure Helm charts using JKube, part 2</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/08/01/how-configure-helm-charts-using-jkube-part-2" /><author><name>Rohan Kumar</name></author><id>9fda19e5-56de-420b-b218-04b6ce9119fa</id><updated>2022-08-01T07:00:00Z</updated><published>2022-08-01T07:00:00Z</published><summary type="html">&lt;p&gt;&lt;a href="https://helm.sh/"&gt;Helm charts&lt;/a&gt; are a popular and convenient way to support different environments on &lt;a href="/topics/kubernetes"&gt;Kubernetes&lt;/a&gt;. My previous article, &lt;a href="/articles/2022/04/14/generate-helm-charts-your-java-application-using-jkube-part-1"&gt;How Helm and JKube simplify Kubernetes management, part 1&lt;/a&gt;, explained why generating Helm charts for &lt;a href="/topics/enterprise-java"&gt;Java&lt;/a&gt; applications can be difficult and how it's made easier by &lt;a href="https://www.eclipse.org/jkube"&gt;Eclipse JKube&lt;/a&gt;, which has Maven and Gradle plugins.&lt;/p&gt; &lt;p&gt;In Part 1, you learned how to generate Helm charts for Java automatically without any configuration and to publish them to desired Helm registries. While a zero-configuration approach is a great way to get started, most projects tune the Eclipse JKube plugins to generate the Helm charts to meet their requirements.&lt;/p&gt; &lt;p&gt;This follow-up article explains how to configure Helm charts generated by JKube's Maven and Gradle plugins via various configuration options provided by Eclipse JKube.&lt;/p&gt; &lt;p&gt;Specifically, we will cover:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;XML&lt;/li&gt; &lt;li&gt;Java properties&lt;/li&gt; &lt;li&gt;Resource fragments&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Then we will conclude by demonstrating how to configure your Helm registry where you store your configuration.&lt;/p&gt; &lt;p&gt;Assuming you completed part one, you should already have the JKube Maven plugin (available in &lt;a href="https://github.com/rohankanojia-forks/eclipse-jkube-helm-demo"&gt;this Github repository&lt;/a&gt;) in your sample project:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-xml"&gt;&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jkube&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;openshift-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${jkube.version}&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For this series of articles, we use the Maven plugin provided specifically for Red Hat Openshift. You can configure the Helm chart generated by JKube by overriding the opinionated default Helm configuration. The following sections describe how to customize charts via XML, Java properties, and resource fragments.&lt;/p&gt; &lt;h2&gt;Edit XML to configure Helm&lt;/h2&gt; &lt;p&gt;One way to configure a Helm chart managed by JKube is to directly edit the &lt;code&gt;pom.xml&lt;/code&gt; file in the JKube plugin configuration section. Override the default configuration by providing a &lt;code&gt;helm&lt;/code&gt; configuration option in the plugin's &lt;code&gt;configuration&lt;/code&gt; section. Here is an example:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-xml"&gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jkube&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;openshift-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${jkube.version}&amp;lt;/version&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;helm&amp;gt; &amp;lt;chart&amp;gt;${project.artifactId}&amp;lt;/chart&amp;gt; &amp;lt;version&amp;gt;${project.version}&amp;lt;/version&amp;gt; &amp;lt;description&amp;gt;JKube Helm Maven demo Helm Chart&amp;lt;/description&amp;gt; &amp;lt;home&amp;gt;https://www.eclipse.org/jkube/&amp;lt;/home&amp;gt; &amp;lt;sources&amp;gt; &amp;lt;source&amp;gt;https://github.com/eclipse/jkube&amp;lt;/source&amp;gt; &amp;lt;/sources&amp;gt; &amp;lt;maintainers&amp;gt; &amp;lt;maintainer&amp;gt; &amp;lt;name&amp;gt;Maintainer1&amp;lt;/name&amp;gt; &amp;lt;email&amp;gt;maintainer1@maintainer1.org&amp;lt;/email&amp;gt; &amp;lt;url&amp;gt;maintainer1.org&amp;lt;/url&amp;gt; &amp;lt;/maintainer&amp;gt; &amp;lt;maintainer&amp;gt; &amp;lt;name&amp;gt;Maintainer2&amp;lt;/name&amp;gt; &amp;lt;email&amp;gt;maintainer2@maintainer2.org&amp;lt;/email&amp;gt; &amp;lt;url&amp;gt;maintainer2.org&amp;lt;/url&amp;gt; &amp;lt;/maintainer&amp;gt; &amp;lt;/maintainers&amp;gt; &amp;lt;icon&amp;gt;https://helm.sh/img/helm.svg&amp;lt;/icon&amp;gt; &amp;lt;keywords&amp;gt;eclipse,jkube,kubernetes,maven&amp;lt;/keywords&amp;gt; &amp;lt;sourceDir&amp;gt;${project.basedir}/target/classes/META-INF/jkube&amp;lt;/sourceDir&amp;gt; &amp;lt;outputDir&amp;gt;${project.basedir}/target/jkube/helm&amp;lt;/outputDir&amp;gt; &amp;lt;chartExtension&amp;gt;tar.gz&amp;lt;/chartExtension&amp;gt; &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;name&amp;gt;ingress-nginx&amp;lt;/name&amp;gt; &amp;lt;version&amp;gt;3.16.1&amp;lt;/version&amp;gt; &amp;lt;repository&amp;gt;https://kubernetes.github.io/ingress-nginx&amp;lt;/repository&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;/helm&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The complete set of supported configuration options is in the &lt;a href="https://www.eclipse.org/jkube/docs/openshift-maven-plugin#jkube:helm"&gt;oc:helm documentation&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Now run OpenShift Maven Plugin's resource and the Helm goal to regenerate the YAML manifests and Helm chart. I have added the plugin configuration in a separate xml-configuration profile.&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ ./mvnw oc:resource oc:helm -Pxml-configuration&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;After running that command, you should be able to see this generated Helm Chart:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;apiVersion: v1 name: jkube-helm-maven home: https://www.eclipse.org/jkube/ sources: - https://github.com/eclipse/jkube version: 1.0.0-SNAPSHOT description: JKube Helm Maven demo Helm Chart keywords: - eclipse - jkube - kubernetes - maven maintainers: - name: Maintainer1 email: maintainer1@maintainer1.org url: maintainer1.org - name: Maintainer2 email: maintainer2@maintainer2.org url: maintainer2.org icon: https://helm.sh/img/helm.svg dependencies: - name: ingress-nginx version: 3.16.1 repository: https://kubernetes.github.io/ingress-nginx &lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;Configuring Helm using Java properties&lt;/h2&gt; &lt;p&gt;JKube also exposes the Helm configuration via Java properties. Here is an example of how to provide the configuration from the previous section using Maven properties:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-xml"&gt; &amp;lt;profile&amp;gt; &amp;lt;id&amp;gt;property-configuration&amp;lt;/id&amp;gt; &amp;lt;properties&amp;gt; &amp;lt;jkube.helm.chart&amp;gt;${project.artifactId}&amp;lt;/jkube.helm.chart&amp;gt; &amp;lt;jkube.helm.version&amp;gt;${project.version}&amp;lt;/jkube.helm.version&amp;gt; &amp;lt;jkube.helm.description&amp;gt;JKube Helm Maven demo Helm Chart (Properties)&amp;lt;/jkube.helm.description&amp;gt; &amp;lt;jkube.helm.home&amp;gt;https://www.eclipse.org/jkube/&amp;lt;/jkube.helm.home&amp;gt; &amp;lt;jkube.helm.icon&amp;gt;https://helm.sh/img/helm.svg&amp;lt;/jkube.helm.icon&amp;gt; &amp;lt;jkube.helm.type&amp;gt;openshift&amp;lt;/jkube.helm.type&amp;gt; &amp;lt;jkube.helm.sourceDir&amp;gt;${project.basedir}/target/classes/META-INF/jkube&amp;lt;/jkube.helm.sourceDir&amp;gt; &amp;lt;jkube.helm.outputDir&amp;gt;${project.basedir}/target/jkube/helm&amp;lt;/jkube.helm.outputDir&amp;gt; &amp;lt;jkube.helm.chartExtension&amp;gt;tar.gz&amp;lt;/jkube.helm.chartExtension&amp;gt; &amp;lt;/properties&amp;gt; &amp;lt;/profile&amp;gt;&lt;/code&gt;&lt;/pre&gt; &lt;p class="Indent1"&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: You can't configure complex elements such as maintainers and sources via properties.&lt;/p&gt; &lt;p&gt;Run the OpenShift Maven Plugin's resource and the Helm goal to regenerate the YAML manifests and Helm chart. As in the previous section, I have added the plugin configuration in a separate property-configuration profile.&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ ./mvnw oc:resource oc:helm -Pproperty-configuration&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You should see the generated Helm chart in the &lt;code&gt;target/jkube/helm/openshift/&lt;/code&gt; directory. The chart's contents should be similar to the chart generated with the &lt;code&gt;xml-configuration&lt;/code&gt; profile in the previous step.&lt;/p&gt; &lt;h2&gt;Configuring Helm using resource fragments&lt;/h2&gt; &lt;p&gt;Suppose you want to apply a CustomResource object along with your regular Kubernetes resources during the "resource and apply" phase of the OpenShift Maven Plugin's run. It is impossible to provide a custom resource via an XML configuration or property. Instead, use the third method of generating a Helm chart: &lt;a href="https://www.eclipse.org/jkube/docs/openshift-maven-plugin#_resource_fragments"&gt;JKube resource fragments&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;JKube allows users to provide their Kubernetes YAML manifests in a specific directory. The manifests are automatically picked up during oc:resource goal and added to the Helm chart.&lt;/p&gt; &lt;p&gt;For this article, we will use the &lt;a href="https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/#create-custom-objects"&gt;crontab CustomResource&lt;/a&gt; from the Kubernetes documentation. To start, apply the &lt;a href="https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/#create-a-customresourcedefinition"&gt;crontab CustomResourceDefinition&lt;/a&gt; on OpenShift using the command-line tool:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ oc create -f crontab-crd.yml customresourcedefinition.apiextensions.k8s.io/crontabs.stable.example.com created &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let's take a look at our crontab custom resource manifest. Usually, you would add this file to the &lt;code&gt;src/main/jkube&lt;/code&gt; directory (the default location of the resource directory). But in our case, we have configured a different resource directory (the &lt;code&gt;fragments&lt;/code&gt; folder in the root directory). The &lt;code&gt;fragments/jkube/crontab-cr.yaml&lt;/code&gt; file contains:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-python"&gt;apiVersion: "stable.example.com/v1" kind: CronTab metadata: name: ${project.artifactId} labels: helm.sh/chart: "${project.artifactId}-${crontab.release}" app.kubernetes.io/managed-by: "${crontab.managedby}" spec: cronSpec: ${crontab.spec} image: ${crontab.image} &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note how we provide some of the values in this crontab resource fragment using fields enclosed in &lt;code&gt;${...}&lt;/code&gt;. You must define these values in the Helm parameter configurations, as in the following example:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-xml"&gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jkube&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;kubernetes-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${jkube.version}&amp;lt;/version&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;resourceDir&amp;gt;${project.basedir}/fragments/jkube&amp;lt;/resourceDir&amp;gt; &amp;lt;helm&amp;gt; &amp;lt;parameters&amp;gt; &amp;lt;parameter&amp;gt; &amp;lt;name&amp;gt;crontab.spec&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;{{ .spec | default "* * * * */5" | quote }}&amp;lt;/value&amp;gt; &amp;lt;/parameter&amp;gt; &amp;lt;parameter&amp;gt; &amp;lt;name&amp;gt;crontab.image&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;{{ .image | default "my-awesome-cron-image" | upper | quote }}&amp;lt;/value&amp;gt; &amp;lt;/parameter&amp;gt; &amp;lt;parameter&amp;gt; &amp;lt;name&amp;gt;crontab.release&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;{{ .Chart.Version }}&amp;lt;/value&amp;gt; &amp;lt;/parameter&amp;gt; &amp;lt;parameter&amp;gt; &amp;lt;name&amp;gt;crontab.managedby&amp;lt;/name&amp;gt; &amp;lt;value&amp;gt;jkube&amp;lt;/value&amp;gt; &amp;lt;/parameter&amp;gt; &amp;lt;/parameters&amp;gt; &amp;lt;/helm&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can specify strings, Maven properties, or Helm template directives as values. Helm parameters can contain non-string fields and periods. JKube automatically resolves Maven properties in a &lt;code&gt;values.yaml&lt;/code&gt; file.&lt;/p&gt; &lt;p&gt;Run the OpenShift Maven Plugin's resource and the Helm goal to regenerate the YAML manifests and Helm chart. I have added the plugin configuration in a separate &lt;code&gt;fragment-configuration&lt;/code&gt; profile.&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ ./mvnw oc:resource oc:helm -Pfragment-configuration &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This results in the following crontab template:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ cat target/jkube/helm/jkube-helm-maven/openshift/templates/jkube-helm-maven-cr.yaml --- apiVersion: stable.example.com/v1 kind: CronTab metadata: labels: helm.sh/chart: "jkube-helm-maven-{{ .Chart.Version }}" app.kubernetes.io/managed-by: {{ .Values.crontab.managedby | default "jkube" }} app: jkube-helm-maven provider: jkube version: 1.0.0-SNAPSHOT group: org.eclipse.jkube.demos name: jkube-helm-maven spec: cronSpec: {{ .spec | default "* * * * */5" | quote }} image: {{ .image | default "my-awesome-cron-image" | upper | quote }} &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;JKube has replaced &lt;code&gt;${...}&lt;/code&gt; placeholders with values specified in the &lt;code&gt;parameter&lt;/code&gt; configurations. JKube also generated a &lt;code&gt;values.yaml&lt;/code&gt; file for later use by Helm for resolving values. You can inspect the generated &lt;code&gt;values.yaml&lt;/code&gt; file as follows:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ cat target/jkube/helm/jkube-helm-maven/openshift/values.yaml --- crontab: managedby: jkube &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Next, install this Helm chart. You should see the crontab custom resource applied to the target cluster:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ helm install --generate-name target/jkube/helm/jkube-helm-maven/openshift/ NAME: openshift-1657293004 LAST DEPLOYED: Fri Jul 8 20:40:05 2022 NAMESPACE: default STATUS: deployed REVISION: 1 TEST SUITE: None &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Check the applied crontab resource:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ oc get crontab NAME AGE jkube-helm-maven 86s $ oc get crontab jkube-helm-maven -o yaml apiVersion: stable.example.com/v1 kind: CronTab metadata: annotations: meta.helm.sh/release-name: openshift-1657293004 meta.helm.sh/release-namespace: default labels: app: jkube-helm-maven app.kubernetes.io/managed-by: Helm group: org.eclipse.jkube.demos helm.sh/chart: jkube-helm-maven-1.0.0-SNAPSHOT provider: jkube version: 1.0.0-SNAPSHOT name: jkube-helm-maven namespace: default resourceVersion: "43872" uid: c7b8547e-d0c1-404f-842c-f8e265340b34 spec: cronSpec: '* * * * */5' image: MY-AWESOME-CRON-IMAGE &lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;Configuring the Helm registry&lt;/h2&gt; &lt;p&gt;Apart from configuring Helm charts, you must configure the registry to which you will push your Helm chart. Like Helm charts, Helm registries can be configured via XML configuration or properties.&lt;/p&gt; &lt;p&gt;I used &lt;a href="https://chartmuseum.com/"&gt;ChartMuseum&lt;/a&gt; for my Helm registry. I have set up a local instance on my machine. You need to change the examples that follow to reflect your Helm registry.&lt;/p&gt; &lt;p&gt;If your project version is a snapshot, use the &lt;code&gt;snapshotRepository&lt;/code&gt; field for Helm registry configuration. Otherwise, use &lt;code&gt;stableRepository&lt;/code&gt;. We will use &lt;code&gt;snapshotRepository&lt;/code&gt; for this demo since it has a 1.0.0-SNAPSHOT Maven version:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-xml"&gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jkube&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;kubernetes-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${jkube.version}&amp;lt;/version&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;helm&amp;gt; &amp;lt;snapshotRepository&amp;gt; &amp;lt;name&amp;gt;ChartMuseum&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;http://localhost:8080/api/charts&amp;lt;/url&amp;gt; &amp;lt;type&amp;gt;CHARTMUSEUM&amp;lt;/type&amp;gt; &amp;lt;username&amp;gt;user1&amp;lt;/username&amp;gt; &amp;lt;/snapshotRepository&amp;gt; &amp;lt;/helm&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Once you have configured your Helm registry details, run the Helm push goal:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ ./mvnw oc:helm-push -Djkube.helm.snapshotRepository.password=secret&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This should upload the Helm chart to the specified registry. You can also provide all this configuration in the form of properties, as shown in the following command:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-bash"&gt;$ ./mvnw oc:helm-push -Djkube.helm.snapshotRepository.name=ChartMuseum \ &amp;gt; -Djkube.helm.snapshotRepository.url=http://localhost:8080/api/charts \ &amp;gt; -Djkube.helm.snapshotRepository.type=CHARTMUSEUM \ &amp;gt; -Djkube.helm.snapshotRepository.username=user1 \ &amp;gt; -Djkube.helm.snapshotRepository.password=secret&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It is also possible to provide registry credentials in Maven settings (&lt;code&gt;~/.m2/settings.xml&lt;/code&gt;) by specifying the Helm registry name and URL:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-xml"&gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.eclipse.jkube&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;openshift-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;${jkube.version}&amp;lt;/version&amp;gt; &amp;lt;configuration&amp;gt; &amp;lt;helm&amp;gt; &amp;lt;snapshotRepository&amp;gt; &amp;lt;name&amp;gt;ChartMuseum&amp;lt;/name&amp;gt; &amp;lt;url&amp;gt;http://localhost:8080/api/charts&amp;lt;/url&amp;gt; &amp;lt;type&amp;gt;CHARTMUSEUM&amp;lt;/type&amp;gt; &amp;lt;/snapshotRepository&amp;gt; &amp;lt;/helm&amp;gt; &amp;lt;/configuration&amp;gt; &amp;lt;/plugin&amp;gt; &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can provide Helm registry credentials in the &lt;code&gt;server&lt;/code&gt; section of &lt;code&gt;settings.xml&lt;/code&gt;. The server ID must match the Helm registry name specified in the plugin configuration. JKube can automatically infer credentials from Maven settings:&lt;/p&gt; &lt;pre&gt; &lt;code class="language-xml"&gt;&amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt; &amp;lt;settings xmlns="http://maven.apache.org/SETTINGS/1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd"&amp;gt; &amp;lt;servers&amp;gt; &amp;lt;server&amp;gt; &amp;lt;id&amp;gt;ChartMuseum&amp;lt;/id&amp;gt; &amp;lt;username&amp;gt;user1&amp;lt;/username&amp;gt; &amp;lt;password&amp;gt;secret&amp;lt;/password&amp;gt; &amp;lt;/server&amp;gt; &amp;lt;/servers&amp;gt; &amp;lt;/settings&amp;gt; &lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;Customized JKube configurations&lt;/h2&gt; &lt;p&gt;So far, you have learned the different methods for generating and publishing Helm charts using Eclipse JKube plugins. We demonstrated how easy it is to customize various aspects of Helm charts and registries utilizing a rich set of configuration options. Please try one or more of these options and provide feedback regarding how we can improve your experience.&lt;/p&gt; &lt;p&gt;For more information, check out the &lt;a href="https://www.eclipse.org/jkube"&gt;Eclipse JKube website&lt;/a&gt;. Feel free to follow us on these channels:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://stackoverflow.com/questions/tagged/jkube"&gt;StackOverflow&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://www.youtube.com/channel/UCpU2tjgpfkTVgeDq-DBSV7A"&gt;YouTube Channel&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://twitter.com/jkubeio"&gt;Twitter&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://gitter.im/eclipse/jkube"&gt;Gitter Chat&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; The post &lt;a href="/articles/2022/08/01/how-configure-helm-charts-using-jkube-part-2" title="How to configure Helm charts using JKube, part 2"&gt;How to configure Helm charts using JKube, part 2&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br&gt;&lt;br&gt;</summary><dc:creator>Rohan Kumar</dc:creator><dc:date>2022-08-01T07:00:00Z</dc:date></entry><entry><title type="html">KIE Community welcomes IBM Business Automation</title><link rel="alternate" href="https://blog.kie.org/2022/07/ibm-rht.html" /><author><name>Mark Proctor</name></author><id>https://blog.kie.org/2022/07/ibm-rht.html</id><updated>2022-07-29T10:58:58Z</updated><content type="html">Alex Porcelli and I (Mark Proctor) are very pleased to announce IBM is joining Red Hat in the KIE community. This is a great opportunity to partner as we continue making innovative software for business automation and fostering a tradition of openness and inclusion in the open source arena.  We’re excited by the opportunities that lay ahead of us, and we wanted to reassure people that being true to Open Source roots remains integral to who we are and where we will go. As part of this transition, Alex and other members of the Red Hat team have joined the IBM Business Automation organization. From Alex: I’m thrilled and honored to join the IBM Business Automation organization, following my passion for the great PAM and DM open-source technologies. I’m also excited with the opportunity to continue collaborating with my friends and colleagues from Red Hat and the KIE community! WHAT THIS MEANS FOR THE COMMUNITY Two leaders in their respective places are joining together and bringing their expertise to the KIE community: IBM, with leadership in the business automation space, and Red Hat with leadership within open source. The KIE community will continue to expand and grow bringing in new contributors, expertise, and solutions. Red Hat and IBM plan to work together on the upstream projects, and we invite everyone else interested to join us to make these projects even better. We are also exploring moving the technologies to a Foundation as a means to make collaboration easier and allow for a wider network of collaborators. Community websites will be updated soon and the existing community channels (zulip and google groups) remain. WHAT THIS MEANS FOR END USERS AND CUSTOMERS Red Hat plans to work with IBM within the KIE community to provide Kogito as a shared foundational set of cloud-native technologies for event-driven architectures for rules, workflow and optimization – building on and comprising of Knative, Quarkus, jBPM, Drools and Optaplanner.  To align with Red Hat’s strategic direction for Kubernetes and OpenShift, as part of its work within Kogito, Red Hat will focus on Service Orchestration and Application Logic for OpenShift developers. A key aspect of this is Red Hat’s championing of CNCF’s Serverless Workflow specification.  IBM intends to introduce additional capabilities within the KIE community to appeal to the broader open-source Business Automation audience. They plan to continue investing in OMG specifications, specifically BPMN and DMN. In addition, they plan to combine the KIE cloud-native decisions and workflow with the OMG specs into their recently announced  standalone Open Source offerings.    Mark Proctor &amp;amp; Alex Porcelli The post appeared first on .</content><dc:creator>Mark Proctor</dc:creator></entry><entry><title>Red Hat Developer roundup: Best of July 2022</title><link rel="alternate" href="https://developers.redhat.com/articles/2022/07/29/red-hat-developer-roundup-best-july-2022" /><author><name>Heiker Medina</name></author><id>34b403a3-f94b-4fe0-bca0-662f87d23cff</id><updated>2022-07-29T07:00:00Z</updated><published>2022-07-29T07:00:00Z</published><summary type="html">&lt;p&gt;Welcome to our monthly article recap, where we round up the latest popular content from Red Hat Developer in one helpful place. Like &lt;a href="/articles/2022/06/30/red-hat-developer-roundup-best-june-2022"&gt;last month&lt;/a&gt;, &lt;a href="/topics/gitops"&gt;GitOps&lt;/a&gt;, &lt;a href="/topics/go"&gt;Go&lt;/a&gt;, and &lt;a href="/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; &lt;a href="/topics/security/"&gt;security&lt;/a&gt; topics were in high demand from our readers. Without further ado, let's dive into the July highlights.&lt;/p&gt; &lt;h2&gt;GitOps workflows and security&lt;/h2&gt; &lt;p&gt;In GitOps, Git is not only your source of truth (as it is for most projects) but also your interface to your environment. Developers have used Git workflows for their application delivery method for years, and now operations teams must adopt similar workflows. GitOps advocate Christian Hernandez offered &lt;a href="/articles/2022/07/20/git-workflows-best-practices-gitops-deployments"&gt;tips and best practices to keep in mind for GitOps deployments&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Interested in diving deeper into GitOps principles? Download Christian's new e-book, &lt;a href="/e-books/path-gitops"&gt;&lt;em&gt;The Path to GitOps&lt;/em&gt;&lt;/a&gt;, to understand where GitOps fits in your &lt;a href="/topics/linux/"&gt;continuous integration/continuous delivery (CI/CD)&lt;/a&gt; pipelines. This short guide outlines the various tools and methods you can use to implement GitOps in your organization.&lt;/p&gt; &lt;p&gt;Sahil Sethi also showed you &lt;a href="/articles/2022/07/11/deploy-operator-gitops-using-advanced-cluster-management"&gt;how to integrate security policies into a GitOps environment&lt;/a&gt; to apply consistently throughout your clusters. Security policies are part of &lt;a href="https://www.redhat.com/en/technologies/management/advanced-cluster-management"&gt;Red Hat Advanced Cluster Management for Kubernetes&lt;/a&gt;, a platform that helps users configure and deploy applications and other valuable services such as metrics. &lt;/p&gt; &lt;h2&gt;SaaS security&lt;/h2&gt; &lt;p&gt;The most recent article of our series on &lt;a href="/articles/2022/05/18/saas-architecture-checklist-kubernetes"&gt;building and deploying Software as a service (SaaS) applications&lt;/a&gt; covered &lt;a href="/articles/2022/07/27/saas-security-kubernetes-environments-layered-approach"&gt;SaaS security for containers in Kubernetes environments&lt;/a&gt;. Within modern enterprise environments, it's critical to build security into the full life cycle of planning, development, operations, and maintenance.&lt;/p&gt; &lt;p&gt;Keep an eye out for future installments covering &lt;a href="/topics/automation"&gt;automation&lt;/a&gt; for SaaS development, scalability and disaster recovery, and more.&lt;/p&gt; &lt;h2&gt;Integrate Infinispan and ASP.NET Core&lt;/h2&gt; &lt;p&gt;The open source Infinispan data store is a popular option for in-memory operations. &lt;a href="/topics/dotnet/"&gt;ASP.NET Core&lt;/a&gt; applications can now easily integrate Infinispan as a caching service or session provider. Vittorio Rigamonti provides answers on how to do that in &lt;a href="/topics/c/"&gt;C#&lt;/a&gt; on &lt;a href="/topics/linux/"&gt;Linux&lt;/a&gt; in his article &lt;a href="/articles/2022/07/07/add-infinispan-cache-your-aspnet-application"&gt;Add an Infinispan cache to your ASP.NET application&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Go Toolset container images&lt;/h2&gt; &lt;p&gt;Red Hat's Go Toolset package is available as a container image and offers developers a kickstart to building modern Go applications. It delivers the Go language with Federal Information Processing Standard (FIPS) support for cryptographic modules and the Delve debugger to &lt;a href="/products/rhel/overview"&gt;Red Hat Enterprise Linux&lt;/a&gt; customers.&lt;/p&gt; &lt;p&gt;In &lt;a href="/articles/2022/07/21/how-use-go-toolset-container-images"&gt;How to use Go Toolset container images&lt;/a&gt;, Alejandro Sáez Morollón illustrates how these images support modern Go development and make you more productive in the cloud.&lt;/p&gt; &lt;h2&gt;Secure secrets on Kubernetes &lt;/h2&gt; &lt;p&gt;&lt;a href="/blog/2019/08/15/how-to-use-dekorate-to-create-kubernetes-manifests/"&gt;Dekorate&lt;/a&gt; is a tool that simplifies the process of generating cert-manager custom resources. You can use it to create secrets, such as encryption keys and passwords for your Spring Boot application.&lt;/p&gt; &lt;p&gt;Read &lt;a href="/articles/2022/07/19/secure-kubernetes-certificates-cert-manager-and-dekorate"&gt;Secure Kubernetes certificates with cert-manager and Dekorate&lt;/a&gt; and learn how to keep your secrets safe while developing or running production applications.&lt;/p&gt; &lt;h2&gt;July 2022 on Red Hat Developer&lt;/h2&gt; &lt;p&gt;Here's the full lineup of articles published on Red Hat Developer this month:&lt;/p&gt; &lt;ul&gt; &lt;li aria-level="1"&gt;&lt;a href="/articles/2022/07/27/saas-security-kubernetes-environments-layered-approach"&gt;SaaS security in Kubernetes environments: A layered approach&lt;/a&gt;&lt;/li&gt; &lt;li aria-level="1"&gt;&lt;a href="/articles/2022/07/21/how-use-go-toolset-container-images"&gt;How to use Go Toolset container images&lt;/a&gt;&lt;/li&gt; &lt;li aria-level="1"&gt;&lt;a href="/articles/2022/07/20/git-workflows-best-practices-gitops-deployments"&gt;Git workflows: Best practices for GitOps deployments&lt;/a&gt;&lt;/li&gt; &lt;li aria-level="1"&gt;&lt;a href="/articles/2022/07/19/secure-kubernetes-certificates-cert-manager-and-dekorate"&gt;Secure Kubernetes certificates with cert-manager and Dekorate&lt;/a&gt;&lt;/li&gt; &lt;li aria-level="1"&gt;&lt;a href="/articles/2022/07/18/simplify-client-connection-configurations-service-contexts"&gt;Connect to OpenShift application services with contexts&lt;/a&gt;&lt;/li&gt; &lt;li aria-level="1"&gt;&lt;a href="/articles/2022/07/15/new-http-clients-java-generator-and-more-fabric8-600"&gt;New HTTP clients, a Java generator, and more in Fabric8 6.0.0&lt;/a&gt;&lt;/li&gt; &lt;li aria-level="1"&gt;&lt;a href="/articles/2022/07/14/kafka-monthly-digest-june-2022"&gt;Kafka Monthly Digest: June 2022&lt;/a&gt;&lt;/li&gt; &lt;li aria-level="1"&gt;&lt;a href="/articles/2022/07/07/add-infinispan-cache-your-aspnet-application"&gt;Add an Infinispan cache to your ASP.NET application&lt;/a&gt;&lt;/li&gt; &lt;li aria-level="1"&gt;&lt;a href="/articles/2022/07/06/deploy-jboss-eap-microsoft-azure-red-hat-openshift"&gt;Deploy JBoss EAP on Microsoft Azure Red Hat OpenShift&lt;/a&gt;&lt;/li&gt; &lt;li aria-level="1"&gt;&lt;a href="/articles/2022/07/06/what-qualifies-red-hat-developer-subscription-teams"&gt;What qualifies for Red Hat Developer Subscription for Teams?&lt;/a&gt;&lt;/li&gt; &lt;li aria-level="1"&gt;&lt;a href="/articles/2022/07/05/debugging-hedy-and-nostalgia-3-talks-openjs-world-2022"&gt;Debugging, Hedy, and nostalgia: 3 talks at OpenJS World 2022&lt;/a&gt;&lt;/li&gt; &lt;li aria-level="1"&gt;&lt;a href="/articles/2022/07/05/write-systemtap-script-trace-code-execution-linux"&gt;Write a SystemTap script to trace code execution on Linux&lt;/a&gt;&lt;/li&gt; &lt;li aria-level="1"&gt;&lt;a href="/articles/2022/07/13/install-storage-your-application-cluster-using-rook"&gt;Install storage in your application cluster using Rook&lt;/a&gt;&lt;/li&gt; &lt;li aria-level="1"&gt;&lt;a href="/articles/2022/07/12/how-run-vs-code-openshift-dev-spaces"&gt;How to run VS Code with OpenShift Dev Spaces&lt;/a&gt;&lt;/li&gt; &lt;li aria-level="1"&gt;&lt;a href="/articles/2022/07/11/deploy-operator-gitops-using-advanced-cluster-management"&gt;Deploy an Operator via GitOps using Advanced Cluster Management&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; The post &lt;a href="/articles/2022/07/29/red-hat-developer-roundup-best-july-2022" title="Red Hat Developer roundup: Best of July 2022"&gt;Red Hat Developer roundup: Best of July 2022&lt;/a&gt; appeared first on &lt;a href="https://developers.redhat.com/blog" title="Red Hat Developer"&gt;Red Hat Developer&lt;/a&gt;. &lt;br&gt;&lt;br&gt;</summary><dc:creator>Heiker Medina</dc:creator><dc:date>2022-07-29T07:00:00Z</dc:date></entry><entry><title type="html">Keycloak 19.0.1 released</title><link rel="alternate" href="https://www.keycloak.org/2022/07/keycloak-1901-released" /><author><name /></author><id>https://www.keycloak.org/2022/07/keycloak-1901-released</id><updated>2022-07-29T00:00:00Z</updated><content type="html">To download the release go to . MIGRATION FROM 18.0 Before you upgrade remember to backup your database. If you are not on the previous release refer to for a complete list of migration changes. ALL RESOLVED ISSUES BUGS * Set `resourcesVersionSeed` when using ConcurrentHashMap storage keycloak storage * Installation error - You have an error in your SQL syntax keycloak dist/quarkus * Documentation fixes in configuring keycloak page keycloak dist/quarkus UPGRADING Before you upgrade remember to backup your database and check the for anything that may have changed.</content><dc:creator /></entry><entry><title type="html">Efesto refactoring &amp;#8211; Introduction</title><link rel="alternate" href="https://blog.kie.org/2022/07/efesto-refactoring-introduction.html" /><author><name>Gabriele Cardosi</name></author><id>https://blog.kie.org/2022/07/efesto-refactoring-introduction.html</id><updated>2022-07-28T07:10:46Z</updated><content type="html">This post is meant as an introduction of the overall motivations, goals and choices around the Efesto initiative. PREMISE Originally, "Drools" (and its repository) was meant only as a "rule engine", and all the code was built around this paradigm. Over the years, new engines have been created that used, more or less, the "rule engine", or even not at all. That changed completely the actual paradigm, but the code did not reflected such a change. Different solutions or workarounds have been put in place to make this two incompatible realities (a code meant to invoke mainly the "rule engine", on one side, and different engines interacting in a coordinate manner, on the other side) works together. One of this attempt was the introduction of the "KieAssembler" (and derived) APIs. The goal was to provide a way to coordinate the execution of the different engines, but unfortunately the implementation had two flaws: * its execution has been inserted inside the code flow that was originally written for the rule engine; * it has not been adapted by all the engines, but only by the ones developed after its introduction. The result of the above is that what was meant as "coordinator" of all the different engines, became a specific sub-path of execution of the rules one; and the path of execution of the rules became, as a matter of fact, the coordinator of all the other engines. Beside that, for reasons specific to the "rule engine", the separation of a "compilation" phase and an "execution" one has never been strongly enforced, and this lack of separation leaked in the codebase. The post provides details of an analogue work done inside the Rule engine itself, showing the complexity of the task to be faced. These issues made the code hard to maintain and to expand, requiring a lot of ad-hoc solutions for problems that, actually, are inherent to the whole system. The "KieAssembler" clearly shows that. The engines that extend it have to implement the methods needed for both the compilation and the execution phase; and those KieAssembler-extending classes are invoked both at compile-time and at runtime-phase. As an example, the currently available version of tries to enforce a kind of separation with two different utility classes: * * Again, this is a downstream workaround for a design flaw. As such, each engine should write similar workarounds, and that would not solve the root cause. Consequence of that is that different engines follows different designs and address the same needs in different ways. Some attempts have been made to address these shortcomings, but at a downstream level, and for a more or less specific use-case, making those attempts less efficient then expected. The best example of this is the project. The goal of the "Efesto" refactoring is to tackle all the mentioned issues at the root, adapting the overall codebase to the current paradigm by which the different components are used, following the hard lessons learned over the years. DICTIONARY We define a domain dictionary here because, over the years, some terms have been used with different meanings in different situations, and almost always misunderstanding arose due to these different interpretations. The following are the definition and meanings used in this series of posts: * Model: the textual representation of a given model; e.g. Rules (DRL, other), Decision (DMN), Predictions (PMML), Workflow (BPMN, other) * Engine: the code needed to * transform a specific model in executable form; * execute the executable form of a specific model with a given input data * some examples: * Rule engine * Decision engine * Prediction engine * Workflow engine * Efesto: the framework that exposes the functionalities of the different engines and the name of the project that contains the refactoring * Compile-time: the process of transform the original model in executable form * Runtime: the process of executing a given model with a user input * Container: a given application that uses the drools functionalities (compilation and/or runtime) to fulfill its scope; some examples: * Kie-maven-plugin: uses compile-time to retrieve bytecode and then dump it to a kjar; * Kie-server: uses runtime to load/execute kjars (and, eventually, compile-time for on-the-fly compilation/reload) * Kogito-build: uses compile-time to retrieve bytecode and then dump it to a jar/native image; * Kogito-execution: uses runtime to load/execute jar/native image CLEAN ARCHITECTURE PRINCIPLES The main goal is to have a modular, decoupled system that will be easy to maintain in the long term (i.e. fixing bugs, improving performance, adding features). To achieve that, the knowledge relationship between the different parts is clearly defined and enforced. The system has core components and peripheral components. The “knowledge” arrow points only inward, i.e. peripheral components have knowledge of core components, but not the other way around. Peripheral components does not have knowledge of each other. MICROKERNEL STYLE The microkernel/plugin design is used to reflect the relationship between the different engines and the overall system. Every engine is implemented as a plugin component, and no direct relationship exists between plugins. MAIN TASKS The goal of Efesto refactoring are: * Separate what is “Drools” and what is not Drools * Separate compilation/execution phases * Enforce engines consistency * Provide a pluggable/chainable design SEPARATE DROOLS/NOT DROOLS Efesto (the framework, as defined in this post) is considered an agnostic provider of model execution. As such, it does not depend on any other framework, and it is available as a standalone library, runnable inside any kind of environment/container (e.g. Spring, Quarkus, Kogito, KieServer, etc). To allow that, it contains the bare-minum code required to coordinate the transformation of models in unit of executions, and the execution of them to provide a result. One consequence of this approach is that some functionalities, that are currently in charge of the drools code, will be delegated to the "container". As example, the framework does not write compiled classes to the filesystem, but delegates this task to the invoking code, like the KieMaven plugin. The reason behind this specific choice is that write to a filesystem, and relying on that, requires a series of assumptions (firt of all, a read-write environment) that are not absolutely granted, and should not be addressed by the framework itself, but by the container it is used in. SEPARATE COMPILATION/EXECUTION PHASES As defined before, compilation is the process of transforming a model to an executable unit. Usually it involves some code-generation, but this is not mandatory at all. The result of a compilation is stored inside a so-called "IndexFile", that is a registry of the generated resources, and also contains the entry-point for the execution. As a matter of fact, this entry-point could be a code-generated class, but also an already-existing one (e.g. DMN). On the other side, execution is the process of receiving input data, submitting it to unit of execution, and returning a result. In this phase, the framework reads the identifier of the resource to be invoked from the input; then, the required engine reads the informations needed for the invocation of the entry point from the IndexFile. ENFORCE ENGINES CONSISTENCY Every engine follows the same design. This means that inside the Drools framework there is not a preferential path of execution, tailored around one specific engine, to which all the others have to adapt. Instead, they all implements the same common API, so that the flow of execution is the same for every one. At the same time, this requires and enforces independency between the engines. Every engine implements a “compilation” service and a “loading” service: the former responsible of compiled-resource generation (e.g. code-generation, class compilation, entry-point definition); the latter responsible for actual entry-point invocation. PROVIDE A PLUGGABLE/CHAINABLE DESIGN The microkernel architecture allows the implementation of different engines as isolated plugins. That, in turns, provides some out-of-the-box features: * parallel development of different engines, avoiding overlapping/conflict issues * incremental implementation of new engines, without the needs of a BigBang release * no Monolithic design, where every component is bound, directly on indirectly, to the others * different implementation for the same engine, delegating the choice to the container (with the maven dependency mechanism) * allows “customer” to implement their own version/customization for a given engine The "chainable" feature refers to the possibility to invoke one engine from another. This is a well-known requirement at execution time (e.g. DMN engine requires PMML engine evaluation), but also at compile-time. Since part of execution could be delegated to another engine, this implies that the invoked engine should have "compiled" that part of execution (whatever this mean in specific cases). Another interesting use case is to compile different resources to the same engine. An example of this is offered by Rule engine. THE RULE ENGINE USE-CASE The Rule engine actually has different "formats": Drl files, Decision tables, etc.. All this models are "translated" to a PackageDescr at a given point; and the final result is always the same, an Executable model. For each kind of source there is a specific implementation responsible to translate it to a PackageDescr. There is also an implementation that takes as input the PackageDescr and returns the Executable model. So, the different model-specific engines translates the input to a PackageDescr, and then delegates to the latter one to transform it to the final Executable model. As a by-side note, that chainability feature provides an extremely easy and fast way to manage any kind of "definition" as "Rules" (or whatever engine). CONCLUSION This is the first post of a series around the Efesto effort and implementation. Following ones will go deeper inside technical details and will provide some real use-cases and code so… stay tuned!!! The post appeared first on .</content><dc:creator>Gabriele Cardosi</dc:creator></entry></feed>
